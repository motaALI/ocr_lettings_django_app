version: 2.1
jobs:
  build:
    docker:
      - image: cimg/python:3.6
    working_directory: /home/circleci/project
    steps:
      - checkout

      # Install system dependencies
      - run:
          name: Install system dependencies
          command: |
            sudo apt-get update
            sudo apt-get -y install python3-venv docker-compose
            sudo apt-get -y install docker.io containerd

      # Fix broken packages
      - run:
          name: Fix broken packages
          command: |
            sudo apt-get install -f

      # Upgrade or install containerd
      - run:
          name: Upgrade or install containerd
          command: |
            sudo apt-get install containerd

      # Try installing docker.io again
      - run:
          name: Install docker.io again
          command: |
            sudo apt-get install docker.io

      # Start Docker service with elevated privileges
      - run:
          name: Start Docker service
          command: |
            sudo systemctl start docker

      # Verify docker installation
      - run:
          name: Verify docker installation
          command: |
            docker --version

      # Restore Python dependencies cache
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      
      # Install Python dependencies
      - run:
          name: Install Python dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      # Save Python dependencies cache
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
            
      # Run pytest
      - run:
          name: Run pytest
          command: |
            . venv/bin/activate
            pytest

  deploy:
    docker:
      - image: cimg/python:3.6
    working_directory: /home/circleci/project
    steps:
      - checkout

      # Install AWS CLI
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update
            sudo apt-get -y install awscli

      # Set AWS credentials
      - run:
          name: Set AWS credentials
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region $AWS_REGION

      # Create EC2 user
      - run:
          name: Create EC2 user
          command: |
            ssh -i ~/.ssh/${LETTINGS_APP_EC2_KEY} ubuntu@EC2_PUBLIC_IP 'sudo adduser lettings_app_user'

      # Configure server (example)
      - run:
          name: Configure server
          command: |
            ssh -i ~/.ssh/${LETTINGS_APP_EC2_KEY} ubuntu@EC2_PUBLIC_IP 'sudo apt-get update && sudo apt-get -y install nginx'

      # Build Docker image using Dockerfile from project directory
      - run:
          name: Build Docker image
          command: docker build -t lettings_app -f Dockerfile .

      # Authenticate with Docker Hub using access token
      - run:
          name: Authenticate with Docker Hub
          command: echo "$DOCKERHUB_ACCESS_TOKEN" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin

      # Push Docker image to DockerHub
      - run:
          name: Push Docker image to DockerHub
          command: docker push $DOCKERHUB_USERNAME/lettings_app

      # Deploy using Docker Compose 
      - run:
          name: Deploy using Docker Compose
          command: |
            scp -i ~/.ssh/${LETTINGS_APP_EC2_KEY} docker-compose.yml ubuntu@EC2_PUBLIC_IP:/home/ubuntu/lettings_app
            ssh -i ~/.ssh/${LETTINGS_APP_EC2_KEY} ubuntu@EC2_PUBLIC_IP 'cd /home/ubuntu/lettings_app && docker-compose up -d'

workflows:
  build_and_deploy_workflow:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
