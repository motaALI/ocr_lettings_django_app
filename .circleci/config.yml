version: 2.1

  
jobs:
  build:
    docker:
      - image: cimg/python:3.6
    working_directory: $CIRCLE_WORKING_DIRECTORY
    steps:
      - checkout
      - setup_remote_docker
      # Restore Python dependencies cache
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      # Install Python dependencies
      - run:
          name: Install Python dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
      # Save Python dependencies cache
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      # Run pytest
      - run:
          name: Run pytest
          command: |
            source venv/bin/activate &&
            pip install --upgrade pip &&
            pytest

  deploy:
    docker:
      - image: cimg/python:3.6
    working_directory: /home/circleci/project
    steps:
      - checkout
      - setup_remote_docker
      # Install AWS CLI
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update && sudo apt-get install -y awscli

      # Install openssh-client
      - run:
          name: Install SSH Dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y openssh-client

      # Debug environment variables
      - run:
          name: Debug Environment Variables
          command: |
            echo "AMAZON_ACCESS_KEY_ID: ${AMAZON_ACCESS_KEY_ID}"
            echo "AMAZON_SECRET_ACCESS_KEY: ${AMAZON_SECRET_ACCESS_KEY}"
            echo "AMAZON_REGION: ${AMAZON_REGION}"
      # Install AWS CLI and configure AWS credentials
      - run:
          name: Install AWS CLI and configure AWS credentials
          command: |
            aws configure set aws_access_key_id "${AMAZON_ACCESS_KEY_ID}"
            aws configure set aws_secret_access_key "${AMAZON_SECRET_ACCESS_KEY}"
            aws configure set region "${AMAZON_REGION}"
      # Verify AWS configuration
      - run:
          name: Verify AWS configuration
          command: aws configure list
      # Debug Environment Variables
      - run:
          name: Debug Environment Variables
          command: |
            echo "DOCKERHUB_USERNAME: ${DOCKERHUB_USERNAME}"
            echo "CIRCLE_PROJECT_REPONAME: ${CIRCLE_PROJECT_REPONAME}"
            echo "CIRCLE_SHA1: ${CIRCLE_SHA1}"

      # Build Docker image using Dockerfile from project directory
      - run:
          name: Build Docker image
          command: |
            docker build --tag ${DOCKERHUB_USERNAME}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} .

      # Authenticate with Docker Hub using access token
      - run:
          name: Authenticate with Docker Hub
          command: |
            echo "$DOCKER_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin

      # Push Docker image to DockerHub
      - run:
          name: Push Docker image to DockerHub
          command: docker push ${DOCKERHUB_USERNAME}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}

      - add_ssh_keys:
          fingerprints:
            - "MD5:25:17:88:53:4c:ee:31:07:71:22:7d:33:0d:40:b1:31"
            - "SHA256:DYnPOIhQKpNgbCjWumuMyc6EhL0XEg+tFk424UFHzjg"
      - run:
          name: Create SSH key directory and file
          command: |
            mkdir -p "$HOME"/"${CIRCLE_PROJECT_REPONAME}"
            echo "$LETTINGS_AMAZON_LINUX_KEY_2" > "$HOME"/"${CIRCLE_PROJECT_REPONAME}"/ssh_key
            chmod 600 "$HOME"/"${CIRCLE_PROJECT_REPONAME}"/ssh_key
      
      # Install Docker Compose
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
      # Copy docker-compose.yml to EC2 instance
      - run:
          name: Copy docker-compose.yml to EC2 instance
          command: scp -o StrictHostKeyChecking=no -i "$HOME/${CIRCLE_PROJECT_REPONAME}/ssh_key" docker-compose.yml ec2-user@"$EC2_AMZON_PUBLIC_IP":/home/ec2-user/${CIRCLE_PROJECT_REPONAME}/
      
      # Configure Nginx as reverse proxy
      - run:
          name: Configure Nginx
          command: |
            sudo tee /etc/nginx/sites-available/${CIRCLE_PROJECT_REPONAME} <<EOF
            server {
                listen 80;
                server_name ${EC2_AMZON_PUBLIC_IP};

                location / {
                    proxy_pass http://localhost:8000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }
            EOF
            sudo ln -s /etc/nginx/sites-available/${CIRCLE_PROJECT_REPONAME} /etc/nginx/sites-enabled/

      # SSH into EC2 instance and build and run Docker image
      - run:
          name: Build and run Docker image on EC2 instance
          command: |
            ssh -o StrictHostKeyChecking=no -i "$HOME/${CIRCLE_PROJECT_REPONAME}/ssh_key" ec2-user@"$EC2_AMZON_PUBLIC_IP" "\
              cd /home/ec2-user/${CIRCLE_PROJECT_REPONAME} && \
              docker pull ${DOCKERHUB_USERNAME}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} && \
              docker run -d -p 80:8000 ${DOCKERHUB_USERNAME}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"



workflows:
  build_and_deploy_workflow:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
